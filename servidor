#!/usr/bin/env python
import asyncio

from grader.tcp import Servidor, Conexao
from mensagens import interpretar_mensagem

def sair(conexao: Conexao):
    ip_cliente, porta_cliente = conexao.s.getpeername()
    print(f'Conexão fechada com {ip_cliente}:{porta_cliente}')

    conexao.fechar()

def dados_recebidos(conexao: Conexao, dados: bytes):
    if dados == b'':
        return sair(conexao)
    
    ip_cliente, porta_cliente = conexao.s.getpeername()
    conexao._residuo = conexao._residuo + dados

    mensagem, separador, restante = conexao._residuo.partition(b'\r\n')
    while separador != b'':
        print(f'Mensagem recebida de {ip_cliente}:{porta_cliente}: {mensagem}')

        interpretar_mensagem(conexao, mensagem)

        conexao._residuo = restante
        mensagem, separador, restante = conexao._residuo.partition(b'\r\n')

def conexao_aceita(conexao: Conexao):
    ip_cliente, porta_cliente = conexao.s.getpeername()
    print(f'Nova conexão de {ip_cliente}:{porta_cliente}')

    conexao._residuo = b''
    conexao._apelido = b'*'
    conexao._canais = set()
    conexao.registrar_recebedor(dados_recebidos)

def main():
    servidor = Servidor(6667)
    servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
    asyncio.get_event_loop().run_forever()

if __name__ == '__main__':
    main()
